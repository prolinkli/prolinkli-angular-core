name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running this workflow'
        required: false
        default: 'Manual trigger'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Workflow Info
      if: github.event_name == 'workflow_dispatch'
      run: echo "üöÄ Manual run triggered - ${{ github.event.inputs.reason }}"
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint || echo "No lint script found - skipping lint check"

    - name: Run unit tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

    - name: Build main application
      run: npm run build -- --configuration=production

    - name: Build all libraries
      run: |
        echo "üèóÔ∏è Discovering and building all libraries..."
        
        # Get all library projects from angular.json and build them
        npx ng build --help > /dev/null 2>&1 # ensure ng is working
        
        # Extract library project names from angular.json
        LIBRARIES=$(node -e "
          const config = require('./angular.json');
          const projects = Object.keys(config.projects).filter(name => 
            config.projects[name].projectType === 'library'
          );
          console.log(projects.join(' '));
        ")
        
        echo "Found libraries: $LIBRARIES"
        
        # Build each library
        for lib in $LIBRARIES; do
          echo "üî® Building $lib..."
          npx ng build "$lib" --configuration=production
        done
        
        echo "‚úÖ All libraries built successfully!"

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # Job to check if all required checks pass
  build-status:
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: always()
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test-and-build.result }}" == "success" ]]; then
          echo "‚úÖ All builds passed!"
          exit 0
        else
          echo "‚ùå Build failed!"
          exit 1
        fi 